
IOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d34  08002d34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d3c  08002d3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08002db4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08002db4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aee9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001902  00000000  00000000  0002af89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002c890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001551a  00000000  00000000  0002df08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b54c  00000000  00000000  00043422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008976a  00000000  00000000  0004e96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d80d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003150  00000000  00000000  000d812c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002bf4 	.word	0x08002bf4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08002bf4 	.word	0x08002bf4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <updateData>:
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void StartDefaultTask(void *argument);

void updateData(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0

	char txt[20];
	HAL_UART_Transmit(&huart1,"HI",strlen("HI"),HAL_MAX_DELAY);
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	2202      	movs	r2, #2
 80004ec:	491b      	ldr	r1, [pc, #108]	; (800055c <updateData+0x7c>)
 80004ee:	481c      	ldr	r0, [pc, #112]	; (8000560 <updateData+0x80>)
 80004f0:	f001 ff75 	bl	80023de <HAL_UART_Transmit>
	if (ir.state != 2) {
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <updateData+0x84>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d02b      	beq.n	8000554 <updateData+0x74>

	//}

	//else {
		int num =1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]

		//fetch num
		if (HAL_UART_Receive(&huart1,&txt,strlen(txt),HAL_MAX_DELAY)== HAL_OK){
 8000500:	463b      	mov	r3, r7
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe68 	bl	80001d8 <strlen>
 8000508:	4603      	mov	r3, r0
 800050a:	b29a      	uxth	r2, r3
 800050c:	4639      	mov	r1, r7
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <updateData+0x80>)
 8000514:	f001 fff5 	bl	8002502 <HAL_UART_Receive>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d106      	bne.n	800052c <updateData+0x4c>
			HAL_UART_Transmit(&huart2,"ok",strlen("ok"),HAL_MAX_DELAY);
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	2202      	movs	r2, #2
 8000524:	4910      	ldr	r1, [pc, #64]	; (8000568 <updateData+0x88>)
 8000526:	4811      	ldr	r0, [pc, #68]	; (800056c <updateData+0x8c>)
 8000528:	f001 ff59 	bl	80023de <HAL_UART_Transmit>
		}

		//decrease num
		num = atoi(txt);
 800052c:	463b      	mov	r3, r7
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fa9c 	bl	8002a6c <atoi>
 8000534:	6178      	str	r0, [r7, #20]
		num -= 1;
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3b01      	subs	r3, #1
 800053a:	617b      	str	r3, [r7, #20]

		//update num
		//sprintf(txt,"%d",num);
		HAL_UART_Transmit(&huart2,txt,strlen(txt),HAL_MAX_DELAY);
 800053c:	463b      	mov	r3, r7
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe4a 	bl	80001d8 <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	4639      	mov	r1, r7
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <updateData+0x8c>)
 8000550:	f001 ff45 	bl	80023de <HAL_UART_Transmit>
	}

}
 8000554:	bf00      	nop
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	08002c0c 	.word	0x08002c0c
 8000560:	200000d4 	.word	0x200000d4
 8000564:	20000118 	.word	0x20000118
 8000568:	08002c10 	.word	0x08002c10
 800056c:	20000124 	.word	0x20000124

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 faf4 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f81a 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f922 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f8f6 	bl	8000770 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000584:	f000 f8ca 	bl	800071c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000588:	f000 f87a 	bl	8000680 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <main+0x38>)
 800058e:	f001 fae7 	bl	8001b60 <HAL_TIM_Base_Start_IT>
  ir.state = 0;
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <main+0x3c>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
  ir.count = 0;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <main+0x3c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  ir.timer = 40000;
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <main+0x3c>)
 80005a0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80005a4:	605a      	str	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x36>
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	20000118 	.word	0x20000118

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fa82 	bl	8002ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a26      	ldr	r2, [pc, #152]	; (8000678 <SystemClock_Config+0xc8>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a20      	ldr	r2, [pc, #128]	; (800067c <SystemClock_Config+0xcc>)
 80005fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fdcf 	bl	80011d8 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000640:	f000 f94c 	bl	80008dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f831 	bl	80016c8 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800066c:	f000 f936 	bl	80008dc <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_TIM3_Init+0x94>)
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <MX_TIM3_Init+0x98>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_TIM3_Init+0x94>)
 80006a4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80006a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_TIM3_Init+0x94>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_TIM3_Init+0x94>)
 80006b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_TIM3_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM3_Init+0x94>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c4:	4813      	ldr	r0, [pc, #76]	; (8000714 <MX_TIM3_Init+0x94>)
 80006c6:	f001 f9fb 	bl	8001ac0 <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006d0:	f000 f904 	bl	80008dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_TIM3_Init+0x94>)
 80006e2:	f001 fba7 	bl	8001e34 <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 f8f6 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_TIM3_Init+0x94>)
 80006fe:	f001 fd9f 	bl	8002240 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000708:	f000 f8e8 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000008c 	.word	0x2000008c
 8000718:	40000400 	.word	0x40000400

0800071c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART1_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000754:	f001 fdf6 	bl	8002344 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f8bd 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000d4 	.word	0x200000d4
 800076c:	40011000 	.word	0x40011000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f001 fdcc 	bl	8002344 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f893 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000124 	.word	0x20000124
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <MX_GPIO_Init+0xe8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a32      	ldr	r2, [pc, #200]	; (80008ac <MX_GPIO_Init+0xe8>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <MX_GPIO_Init+0xe8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <MX_GPIO_Init+0xe8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a2b      	ldr	r2, [pc, #172]	; (80008ac <MX_GPIO_Init+0xe8>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_GPIO_Init+0xe8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <MX_GPIO_Init+0xe8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a24      	ldr	r2, [pc, #144]	; (80008ac <MX_GPIO_Init+0xe8>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b22      	ldr	r3, [pc, #136]	; (80008ac <MX_GPIO_Init+0xe8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_GPIO_Init+0xe8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <MX_GPIO_Init+0xe8>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_GPIO_Init+0xe8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <MX_GPIO_Init+0xec>)
 8000850:	f000 fc8e 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_GPIO_Init+0xf0>)
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_GPIO_Init+0xf4>)
 800086a:	f000 fafd 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086e:	2320      	movs	r3, #32
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <MX_GPIO_Init+0xec>)
 8000886:	f000 faef 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800088a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_GPIO_Init+0xec>)
 80008a0:	f000 fae2 	bl	8000e68 <HAL_GPIO_Init>

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	10210000 	.word	0x10210000
 80008b8:	40020800 	.word	0x40020800

080008bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	//update every 20 second
	updateData();
 80008c4:	f7ff fe0c 	bl	80004e0 <updateData>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008c8:	2120      	movs	r1, #32
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80008cc:	f000 fc69 	bl	80011a2 <HAL_GPIO_TogglePin>

}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40020000 	.word	0x40020000

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_MspInit+0x4c>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000926:	2007      	movs	r0, #7
 8000928:	f000 fa5c 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_TIM_Base_MspInit+0x48>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d115      	bne.n	8000976 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_TIM_Base_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_TIM_Base_MspInit+0x4c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_TIM_Base_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	201d      	movs	r0, #29
 800096c:	f000 fa45 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000970:	201d      	movs	r0, #29
 8000972:	f000 fa5e 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40000400 	.word	0x40000400
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a32      	ldr	r2, [pc, #200]	; (8000a70 <HAL_UART_MspInit+0xe8>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12d      	bne.n	8000a06 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <HAL_UART_MspInit+0xec>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a30      	ldr	r2, [pc, #192]	; (8000a74 <HAL_UART_MspInit+0xec>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <HAL_UART_MspInit+0xec>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <HAL_UART_MspInit+0xec>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a29      	ldr	r2, [pc, #164]	; (8000a74 <HAL_UART_MspInit+0xec>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <HAL_UART_MspInit+0xec>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f4:	2307      	movs	r3, #7
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	481e      	ldr	r0, [pc, #120]	; (8000a78 <HAL_UART_MspInit+0xf0>)
 8000a00:	f000 fa32 	bl	8000e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a04:	e030      	b.n	8000a68 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_UART_MspInit+0xf4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d12b      	bne.n	8000a68 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0xec>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_UART_MspInit+0xec>)
 8000a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0xec>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_UART_MspInit+0xec>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <HAL_UART_MspInit+0xec>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_UART_MspInit+0xec>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_UART_MspInit+0xf0>)
 8000a64:	f000 fa00 	bl	8000e68 <HAL_GPIO_Init>
}
 8000a68:	bf00      	nop
 8000a6a:	3730      	adds	r7, #48	; 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40011000 	.word	0x40011000
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40004400 	.word	0x40004400

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f89a 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM3_IRQHandler+0x10>)
 8000ada:	f001 f8a3 	bl	8001c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000008c 	.word	0x2000008c

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b36:	f7ff ffd7 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f001 ffa1 	bl	8002a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fd17 	bl	8000570 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b50:	08002d44 	.word	0x08002d44
  ldr r2, =_sbss
 8000b54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b58:	2000016c 	.word	0x2000016c

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_Init+0x40>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_Init+0x40>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_Init+0x40>)
 8000b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f92b 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fea8 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023c00 	.word	0x40023c00

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f943 	bl	8000e4e <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f90b 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000168 	.word	0x20000168

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000168 	.word	0x20000168

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff3e 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff31 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffa2 	bl	8000da0 <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e159      	b.n	8001138 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8148 	bne.w	8001132 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a2 	beq.w	8001132 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a56      	ldr	r2, [pc, #344]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100a:	4a52      	ldr	r2, [pc, #328]	; (8001154 <HAL_GPIO_Init+0x2ec>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <HAL_GPIO_Init+0x2f0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x202>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a48      	ldr	r2, [pc, #288]	; (800115c <HAL_GPIO_Init+0x2f4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1fe>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a47      	ldr	r2, [pc, #284]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1fa>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a46      	ldr	r2, [pc, #280]	; (8001164 <HAL_GPIO_Init+0x2fc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1f6>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a45      	ldr	r2, [pc, #276]	; (8001168 <HAL_GPIO_Init+0x300>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1f2>
 8001056:	2304      	movs	r3, #4
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x204>
 800105a:	2307      	movs	r3, #7
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x204>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x204>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x204>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x204>
 800106a:	2300      	movs	r3, #0
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107c:	4935      	ldr	r1, [pc, #212]	; (8001154 <HAL_GPIO_Init+0x2ec>)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_GPIO_Init+0x304>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ae:	4a2f      	ldr	r2, [pc, #188]	; (800116c <HAL_GPIO_Init+0x304>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_GPIO_Init+0x304>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_GPIO_Init+0x304>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_GPIO_Init+0x304>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001102:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_GPIO_Init+0x304>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_GPIO_Init+0x304>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_GPIO_Init+0x304>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3301      	adds	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	f67f aea2 	bls.w	8000e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40013800 	.word	0x40013800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40021000 	.word	0x40021000
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	041a      	lsls	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b4:	887a      	ldrh	r2, [r7, #2]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	041a      	lsls	r2, r3, #16
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43d9      	mvns	r1, r3
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	400b      	ands	r3, r1
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e264      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d075      	beq.n	80012e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f6:	4ba3      	ldr	r3, [pc, #652]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d00c      	beq.n	800121c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001202:	4ba0      	ldr	r3, [pc, #640]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120a:	2b08      	cmp	r3, #8
 800120c:	d112      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b9d      	ldr	r3, [pc, #628]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b99      	ldr	r3, [pc, #612]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d05b      	beq.n	80012e0 <HAL_RCC_OscConfig+0x108>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d157      	bne.n	80012e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e23f      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x74>
 800123e:	4b91      	ldr	r3, [pc, #580]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a90      	ldr	r2, [pc, #576]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a8a      	ldr	r2, [pc, #552]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b88      	ldr	r3, [pc, #544]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a87      	ldr	r2, [pc, #540]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 8001270:	4b84      	ldr	r3, [pc, #528]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a83      	ldr	r2, [pc, #524]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b81      	ldr	r3, [pc, #516]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a80      	ldr	r2, [pc, #512]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fccc 	bl	8000c2c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fcc8 	bl	8000c2c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e204      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xc0>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcb8 	bl	8000c2c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcb4 	bl	8000c2c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1f0      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0xe8>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d063      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ee:	4b65      	ldr	r3, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b62      	ldr	r3, [pc, #392]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b5f      	ldr	r3, [pc, #380]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1c4      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b56      	ldr	r3, [pc, #344]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4952      	ldr	r1, [pc, #328]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e03a      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d020      	beq.n	800138a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <HAL_RCC_OscConfig+0x2b0>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fc6d 	bl	8000c2c <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc69 	bl	8000c2c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1a5      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4940      	ldr	r1, [pc, #256]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_RCC_OscConfig+0x2b0>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fc4c 	bl	8000c2c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fc48 	bl	8000c2c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e184      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d030      	beq.n	8001424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d016      	beq.n	80013f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_RCC_OscConfig+0x2b4>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fc2c 	bl	8000c2c <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc28 	bl	8000c2c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e164      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x200>
 80013f6:	e015      	b.n	8001424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_RCC_OscConfig+0x2b4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fc15 	bl	8000c2c <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fc11 	bl	8000c2c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e14d      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a0 	beq.w	8001572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10f      	bne.n	8001462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145e:	2301      	movs	r3, #1
 8001460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x2b8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d121      	bne.n	80014b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_RCC_OscConfig+0x2b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_RCC_OscConfig+0x2b8>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147a:	f7ff fbd7 	bl	8000c2c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	e011      	b.n	80014a6 <HAL_RCC_OscConfig+0x2ce>
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	42470000 	.word	0x42470000
 800148c:	42470e80 	.word	0x42470e80
 8001490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001494:	f7ff fbca 	bl	8000c2c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e106      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	4b85      	ldr	r3, [pc, #532]	; (80016bc <HAL_RCC_OscConfig+0x4e4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d106      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2f0>
 80014ba:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	4a80      	ldr	r2, [pc, #512]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6713      	str	r3, [r2, #112]	; 0x70
 80014c6:	e01c      	b.n	8001502 <HAL_RCC_OscConfig+0x32a>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d10c      	bne.n	80014ea <HAL_RCC_OscConfig+0x312>
 80014d0:	4b7b      	ldr	r3, [pc, #492]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a7a      	ldr	r2, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
 80014dc:	4b78      	ldr	r3, [pc, #480]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a77      	ldr	r2, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	e00b      	b.n	8001502 <HAL_RCC_OscConfig+0x32a>
 80014ea:	4b75      	ldr	r3, [pc, #468]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	4a74      	ldr	r2, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6713      	str	r3, [r2, #112]	; 0x70
 80014f6:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a71      	ldr	r2, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d015      	beq.n	8001536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150a:	f7ff fb8f 	bl	8000c2c <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fb8b 	bl	8000c2c <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0c5      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ee      	beq.n	8001512 <HAL_RCC_OscConfig+0x33a>
 8001534:	e014      	b.n	8001560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff fb79 	bl	8000c2c <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff fb75 	bl	8000c2c <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	; 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0af      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001554:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ee      	bne.n	800153e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d105      	bne.n	8001572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001566:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 800156c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 809b 	beq.w	80016b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d05c      	beq.n	8001642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d141      	bne.n	8001614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <HAL_RCC_OscConfig+0x4ec>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb49 	bl	8000c2c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff fb45 	bl	8000c2c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e081      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b0:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	019b      	lsls	r3, r3, #6
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	085b      	lsrs	r3, r3, #1
 80015d4:	3b01      	subs	r3, #1
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	061b      	lsls	r3, r3, #24
 80015e0:	4937      	ldr	r1, [pc, #220]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x4ec>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb1e 	bl	8000c2c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb1a 	bl	8000c2c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e056      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x41c>
 8001612:	e04e      	b.n	80016b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_OscConfig+0x4ec>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fb07 	bl	8000c2c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff fb03 	bl	8000c2c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e03f      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x44a>
 8001640:	e037      	b.n	80016b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e032      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d028      	beq.n	80016ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001666:	429a      	cmp	r2, r3
 8001668:	d121      	bne.n	80016ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d11a      	bne.n	80016ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001684:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001686:	4293      	cmp	r3, r2
 8001688:	d111      	bne.n	80016ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	3b01      	subs	r3, #1
 8001698:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40007000 	.word	0x40007000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470060 	.word	0x42470060

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0cc      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d90c      	bls.n	8001704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b8      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001734:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	494d      	ldr	r1, [pc, #308]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d044      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d119      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	2b03      	cmp	r3, #3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e067      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 0203 	bic.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4934      	ldr	r1, [pc, #208]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7ff fa38 	bl	8000c2c <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7ff fa34 	bl	8000c2c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 020c 	and.w	r2, r3, #12
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1eb      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d20c      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e032      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490e      	ldr	r1, [pc, #56]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f821 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490a      	ldr	r1, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f998 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00
 8001884:	40023800 	.word	0x40023800
 8001888:	08002c18 	.word	0x08002c18
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	2300      	movs	r3, #0
 80018a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ac:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d00d      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x40>
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	f200 80bd 	bhi.w	8001a38 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x34>
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x3a>
 80018c6:	e0b7      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018ca:	60bb      	str	r3, [r7, #8]
       break;
 80018cc:	e0b7      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018d0:	60bb      	str	r3, [r7, #8]
      break;
 80018d2:	e0b4      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d4:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4b5b      	ldr	r3, [pc, #364]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d04d      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	461a      	mov	r2, r3
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	ea02 0800 	and.w	r8, r2, r0
 8001902:	ea03 0901 	and.w	r9, r3, r1
 8001906:	4640      	mov	r0, r8
 8001908:	4649      	mov	r1, r9
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	014b      	lsls	r3, r1, #5
 8001914:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001918:	0142      	lsls	r2, r0, #5
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	ebb0 0008 	subs.w	r0, r0, r8
 8001922:	eb61 0109 	sbc.w	r1, r1, r9
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	018b      	lsls	r3, r1, #6
 8001930:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001934:	0182      	lsls	r2, r0, #6
 8001936:	1a12      	subs	r2, r2, r0
 8001938:	eb63 0301 	sbc.w	r3, r3, r1
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	00d9      	lsls	r1, r3, #3
 8001946:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800194a:	00d0      	lsls	r0, r2, #3
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	eb12 0208 	adds.w	r2, r2, r8
 8001954:	eb43 0309 	adc.w	r3, r3, r9
 8001958:	f04f 0000 	mov.w	r0, #0
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	0259      	lsls	r1, r3, #9
 8001962:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001966:	0250      	lsls	r0, r2, #9
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	f7fe fc36 	bl	80001e8 <__aeabi_uldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4613      	mov	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e04a      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	461a      	mov	r2, r3
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	ea02 0400 	and.w	r4, r2, r0
 800199e:	ea03 0501 	and.w	r5, r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	014b      	lsls	r3, r1, #5
 80019b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b4:	0142      	lsls	r2, r0, #5
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	1b00      	subs	r0, r0, r4
 80019bc:	eb61 0105 	sbc.w	r1, r1, r5
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	018b      	lsls	r3, r1, #6
 80019ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019ce:	0182      	lsls	r2, r0, #6
 80019d0:	1a12      	subs	r2, r2, r0
 80019d2:	eb63 0301 	sbc.w	r3, r3, r1
 80019d6:	f04f 0000 	mov.w	r0, #0
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	00d9      	lsls	r1, r3, #3
 80019e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e4:	00d0      	lsls	r0, r2, #3
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	1912      	adds	r2, r2, r4
 80019ec:	eb45 0303 	adc.w	r3, r5, r3
 80019f0:	f04f 0000 	mov.w	r0, #0
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	0299      	lsls	r1, r3, #10
 80019fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019fe:	0290      	lsls	r0, r2, #10
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	f7fe fbea 	bl	80001e8 <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	3301      	adds	r3, #1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	60bb      	str	r3, [r7, #8]
      break;
 8001a36:	e002      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a3a:	60bb      	str	r3, [r7, #8]
      break;
 8001a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	007a1200 	.word	0x007a1200

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	08002c28 	.word	0x08002c28

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a9c:	f7ff ffdc 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0b5b      	lsrs	r3, r3, #13
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08002c28 	.word	0x08002c28

08001ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e041      	b.n	8001b56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe ff26 	bl	8000938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f000 fa84 	bl	800200c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d001      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e044      	b.n	8001c02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d018      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x6c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba2:	d013      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x6c>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_TIM_Base_Start_IT+0xb4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00e      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x6c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d009      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x6c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_TIM_Base_Start_IT+0xbc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d004      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x6c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d111      	bne.n	8001bf0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d010      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bee:	e007      	b.n	8001c00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800
 8001c1c:	40000c00 	.word	0x40000c00
 8001c20:	40014000 	.word	0x40014000

08001c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d122      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d11b      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0202 	mvn.w	r2, #2
 8001c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f9b2 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001c6c:	e005      	b.n	8001c7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f9a4 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f9b5 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d122      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d11b      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0204 	mvn.w	r2, #4
 8001ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f988 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001cc0:	e005      	b.n	8001cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f97a 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f98b 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d122      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d11b      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0208 	mvn.w	r2, #8
 8001cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f95e 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f950 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f961 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0210 	mvn.w	r2, #16
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2208      	movs	r2, #8
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f934 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f926 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f937 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10e      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0201 	mvn.w	r2, #1
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fd8a 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b80      	cmp	r3, #128	; 0x80
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d107      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 faae 	bl	8002330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d10e      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d107      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8fc 	bl	8001ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d10e      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d107      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0220 	mvn.w	r2, #32
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa78 	bl	800231c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_TIM_ConfigClockSource+0x18>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e0b3      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x180>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e84:	d03e      	beq.n	8001f04 <HAL_TIM_ConfigClockSource+0xd0>
 8001e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8a:	f200 8087 	bhi.w	8001f9c <HAL_TIM_ConfigClockSource+0x168>
 8001e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e92:	f000 8085 	beq.w	8001fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9a:	d87f      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0x168>
 8001e9c:	2b70      	cmp	r3, #112	; 0x70
 8001e9e:	d01a      	beq.n	8001ed6 <HAL_TIM_ConfigClockSource+0xa2>
 8001ea0:	2b70      	cmp	r3, #112	; 0x70
 8001ea2:	d87b      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0x168>
 8001ea4:	2b60      	cmp	r3, #96	; 0x60
 8001ea6:	d050      	beq.n	8001f4a <HAL_TIM_ConfigClockSource+0x116>
 8001ea8:	2b60      	cmp	r3, #96	; 0x60
 8001eaa:	d877      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0x168>
 8001eac:	2b50      	cmp	r3, #80	; 0x50
 8001eae:	d03c      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0xf6>
 8001eb0:	2b50      	cmp	r3, #80	; 0x50
 8001eb2:	d873      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0x168>
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	d058      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0x136>
 8001eb8:	2b40      	cmp	r3, #64	; 0x40
 8001eba:	d86f      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0x168>
 8001ebc:	2b30      	cmp	r3, #48	; 0x30
 8001ebe:	d064      	beq.n	8001f8a <HAL_TIM_ConfigClockSource+0x156>
 8001ec0:	2b30      	cmp	r3, #48	; 0x30
 8001ec2:	d86b      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0x168>
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d060      	beq.n	8001f8a <HAL_TIM_ConfigClockSource+0x156>
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d867      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0x168>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05c      	beq.n	8001f8a <HAL_TIM_ConfigClockSource+0x156>
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d05a      	beq.n	8001f8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ed4:	e062      	b.n	8001f9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f000 f98b 	bl	8002200 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ef8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	609a      	str	r2, [r3, #8]
      break;
 8001f02:	e04e      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6899      	ldr	r1, [r3, #8]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f000 f974 	bl	8002200 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f26:	609a      	str	r2, [r3, #8]
      break;
 8001f28:	e03b      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f000 f8e8 	bl	800210c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2150      	movs	r1, #80	; 0x50
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f941 	bl	80021ca <TIM_ITRx_SetConfig>
      break;
 8001f48:	e02b      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6859      	ldr	r1, [r3, #4]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	461a      	mov	r2, r3
 8001f58:	f000 f907 	bl	800216a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2160      	movs	r1, #96	; 0x60
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f931 	bl	80021ca <TIM_ITRx_SetConfig>
      break;
 8001f68:	e01b      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f000 f8c8 	bl	800210c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2140      	movs	r1, #64	; 0x40
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f921 	bl	80021ca <TIM_ITRx_SetConfig>
      break;
 8001f88:	e00b      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4610      	mov	r0, r2
 8001f96:	f000 f918 	bl	80021ca <TIM_ITRx_SetConfig>
        break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f9c:	bf00      	nop
 8001f9e:	e000      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001fa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <TIM_Base_SetConfig+0xe4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00f      	beq.n	8002044 <TIM_Base_SetConfig+0x38>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x38>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <TIM_Base_SetConfig+0xe8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x38>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <TIM_Base_SetConfig+0xec>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x38>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <TIM_Base_SetConfig+0xf0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <TIM_Base_SetConfig+0xe4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01b      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d017      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <TIM_Base_SetConfig+0xe8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <TIM_Base_SetConfig+0xec>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00f      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a20      	ldr	r2, [pc, #128]	; (80020fc <TIM_Base_SetConfig+0xf0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00b      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <TIM_Base_SetConfig+0xf4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <TIM_Base_SetConfig+0xf8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d003      	beq.n	8002096 <TIM_Base_SetConfig+0x8a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <TIM_Base_SetConfig+0xfc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d108      	bne.n	80020a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <TIM_Base_SetConfig+0xe4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40000c00 	.word	0x40000c00
 8002100:	40014000 	.word	0x40014000
 8002104:	40014400 	.word	0x40014400
 8002108:	40014800 	.word	0x40014800

0800210c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	f023 0201 	bic.w	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f023 030a 	bic.w	r3, r3, #10
 8002148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	621a      	str	r2, [r3, #32]
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800216a:	b480      	push	{r7}
 800216c:	b087      	sub	sp, #28
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f023 0210 	bic.w	r2, r3, #16
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	031b      	lsls	r3, r3, #12
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	621a      	str	r2, [r3, #32]
}
 80021be:	bf00      	nop
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f043 0307 	orr.w	r3, r3, #7
 80021ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	609a      	str	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800221a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	021a      	lsls	r2, r3, #8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	431a      	orrs	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	609a      	str	r2, [r3, #8]
}
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002254:	2302      	movs	r3, #2
 8002256:	e050      	b.n	80022fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d018      	beq.n	80022ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a4:	d013      	beq.n	80022ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00e      	beq.n	80022ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a16      	ldr	r2, [pc, #88]	; (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10c      	bne.n	80022e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40000400 	.word	0x40000400
 8002310:	40000800 	.word	0x40000800
 8002314:	40000c00 	.word	0x40000c00
 8002318:	40014000 	.word	0x40014000

0800231c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e03f      	b.n	80023d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fb0c 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f9a7 	bl	80026dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800239c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b08a      	sub	sp, #40	; 0x28
 80023e2:	af02      	add	r7, sp, #8
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d17c      	bne.n	80024f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_UART_Transmit+0x2c>
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e075      	b.n	80024fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_UART_Transmit+0x3e>
 8002418:	2302      	movs	r3, #2
 800241a:	e06e      	b.n	80024fa <HAL_UART_Transmit+0x11c>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2221      	movs	r2, #33	; 0x21
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002432:	f7fe fbfb 	bl	8000c2c <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	d108      	bne.n	8002460 <HAL_UART_Transmit+0x82>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	e003      	b.n	8002468 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002470:	e02a      	b.n	80024c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2200      	movs	r2, #0
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f8e2 	bl	8002646 <UART_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e036      	b.n	80024fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	3302      	adds	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e007      	b.n	80024ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3301      	adds	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1cf      	bne.n	8002472 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f8b2 	bl	8002646 <UART_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e006      	b.n	80024fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b08a      	sub	sp, #40	; 0x28
 8002506:	af02      	add	r7, sp, #8
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	f040 808c 	bne.w	800263c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_UART_Receive+0x2e>
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e084      	b.n	800263e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_UART_Receive+0x40>
 800253e:	2302      	movs	r3, #2
 8002540:	e07d      	b.n	800263e <HAL_UART_Receive+0x13c>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2222      	movs	r2, #34	; 0x22
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800255e:	f7fe fb65 	bl	8000c2c <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	88fa      	ldrh	r2, [r7, #6]
 8002568:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002578:	d108      	bne.n	800258c <HAL_UART_Receive+0x8a>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e003      	b.n	8002594 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800259c:	e043      	b.n	8002626 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	2120      	movs	r1, #32
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f84c 	bl	8002646 <UART_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e042      	b.n	800263e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3302      	adds	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e01f      	b.n	8002618 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e0:	d007      	beq.n	80025f2 <HAL_UART_Receive+0xf0>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <HAL_UART_Receive+0xfe>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e008      	b.n	8002612 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260c:	b2da      	uxtb	r2, r3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1b6      	bne.n	800259e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	e000      	b.n	800263e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800263c:	2302      	movs	r3, #2
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002656:	e02c      	b.n	80026b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d028      	beq.n	80026b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <UART_WaitOnFlagUntilTimeout+0x30>
 8002666:	f7fe fae1 	bl	8000c2c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	429a      	cmp	r2, r3
 8002674:	d21d      	bcs.n	80026b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002684:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e00f      	b.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4013      	ands	r3, r2
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	429a      	cmp	r2, r3
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d0c3      	beq.n	8002658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026e0:	b09f      	sub	sp, #124	; 0x7c
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f2:	68d9      	ldr	r1, [r3, #12]
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	ea40 0301 	orr.w	r3, r0, r1
 80026fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	431a      	orrs	r2, r3
 800270e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4313      	orrs	r3, r2
 8002714:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002720:	f021 010c 	bic.w	r1, r1, #12
 8002724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800272a:	430b      	orrs	r3, r1
 800272c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	6999      	ldr	r1, [r3, #24]
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	ea40 0301 	orr.w	r3, r0, r1
 8002744:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4bc5      	ldr	r3, [pc, #788]	; (8002a60 <UART_SetConfig+0x384>)
 800274c:	429a      	cmp	r2, r3
 800274e:	d004      	beq.n	800275a <UART_SetConfig+0x7e>
 8002750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4bc3      	ldr	r3, [pc, #780]	; (8002a64 <UART_SetConfig+0x388>)
 8002756:	429a      	cmp	r2, r3
 8002758:	d103      	bne.n	8002762 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800275a:	f7ff f99d 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 800275e:	6778      	str	r0, [r7, #116]	; 0x74
 8002760:	e002      	b.n	8002768 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002762:	f7ff f985 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002766:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002770:	f040 80b6 	bne.w	80028e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002776:	461c      	mov	r4, r3
 8002778:	f04f 0500 	mov.w	r5, #0
 800277c:	4622      	mov	r2, r4
 800277e:	462b      	mov	r3, r5
 8002780:	1891      	adds	r1, r2, r2
 8002782:	6439      	str	r1, [r7, #64]	; 0x40
 8002784:	415b      	adcs	r3, r3
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
 8002788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800278c:	1912      	adds	r2, r2, r4
 800278e:	eb45 0303 	adc.w	r3, r5, r3
 8002792:	f04f 0000 	mov.w	r0, #0
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	00d9      	lsls	r1, r3, #3
 800279c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027a0:	00d0      	lsls	r0, r2, #3
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	1911      	adds	r1, r2, r4
 80027a8:	6639      	str	r1, [r7, #96]	; 0x60
 80027aa:	416b      	adcs	r3, r5
 80027ac:	667b      	str	r3, [r7, #100]	; 0x64
 80027ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	1891      	adds	r1, r2, r2
 80027ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80027bc:	415b      	adcs	r3, r3
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027c8:	f7fd fd0e 	bl	80001e8 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4ba5      	ldr	r3, [pc, #660]	; (8002a68 <UART_SetConfig+0x38c>)
 80027d2:	fba3 2302 	umull	r2, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	011e      	lsls	r6, r3, #4
 80027da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027dc:	461c      	mov	r4, r3
 80027de:	f04f 0500 	mov.w	r5, #0
 80027e2:	4622      	mov	r2, r4
 80027e4:	462b      	mov	r3, r5
 80027e6:	1891      	adds	r1, r2, r2
 80027e8:	6339      	str	r1, [r7, #48]	; 0x30
 80027ea:	415b      	adcs	r3, r3
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027f2:	1912      	adds	r2, r2, r4
 80027f4:	eb45 0303 	adc.w	r3, r5, r3
 80027f8:	f04f 0000 	mov.w	r0, #0
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	00d9      	lsls	r1, r3, #3
 8002802:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002806:	00d0      	lsls	r0, r2, #3
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	1911      	adds	r1, r2, r4
 800280e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002810:	416b      	adcs	r3, r5
 8002812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	461a      	mov	r2, r3
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	1891      	adds	r1, r2, r2
 8002820:	62b9      	str	r1, [r7, #40]	; 0x28
 8002822:	415b      	adcs	r3, r3
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800282a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800282e:	f7fd fcdb 	bl	80001e8 <__aeabi_uldivmod>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4b8c      	ldr	r3, [pc, #560]	; (8002a68 <UART_SetConfig+0x38c>)
 8002838:	fba3 1302 	umull	r1, r3, r3, r2
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	2164      	movs	r1, #100	; 0x64
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	3332      	adds	r3, #50	; 0x32
 800284a:	4a87      	ldr	r2, [pc, #540]	; (8002a68 <UART_SetConfig+0x38c>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002858:	441e      	add	r6, r3
 800285a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285c:	4618      	mov	r0, r3
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	1894      	adds	r4, r2, r2
 8002868:	623c      	str	r4, [r7, #32]
 800286a:	415b      	adcs	r3, r3
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
 800286e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002872:	1812      	adds	r2, r2, r0
 8002874:	eb41 0303 	adc.w	r3, r1, r3
 8002878:	f04f 0400 	mov.w	r4, #0
 800287c:	f04f 0500 	mov.w	r5, #0
 8002880:	00dd      	lsls	r5, r3, #3
 8002882:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002886:	00d4      	lsls	r4, r2, #3
 8002888:	4622      	mov	r2, r4
 800288a:	462b      	mov	r3, r5
 800288c:	1814      	adds	r4, r2, r0
 800288e:	653c      	str	r4, [r7, #80]	; 0x50
 8002890:	414b      	adcs	r3, r1
 8002892:	657b      	str	r3, [r7, #84]	; 0x54
 8002894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	461a      	mov	r2, r3
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	1891      	adds	r1, r2, r2
 80028a0:	61b9      	str	r1, [r7, #24]
 80028a2:	415b      	adcs	r3, r3
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028ae:	f7fd fc9b 	bl	80001e8 <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <UART_SetConfig+0x38c>)
 80028b8:	fba3 1302 	umull	r1, r3, r3, r2
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	2164      	movs	r1, #100	; 0x64
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	3332      	adds	r3, #50	; 0x32
 80028ca:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <UART_SetConfig+0x38c>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	f003 0207 	and.w	r2, r3, #7
 80028d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4432      	add	r2, r6
 80028dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028de:	e0b9      	b.n	8002a54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e2:	461c      	mov	r4, r3
 80028e4:	f04f 0500 	mov.w	r5, #0
 80028e8:	4622      	mov	r2, r4
 80028ea:	462b      	mov	r3, r5
 80028ec:	1891      	adds	r1, r2, r2
 80028ee:	6139      	str	r1, [r7, #16]
 80028f0:	415b      	adcs	r3, r3
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028f8:	1912      	adds	r2, r2, r4
 80028fa:	eb45 0303 	adc.w	r3, r5, r3
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	00d9      	lsls	r1, r3, #3
 8002908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800290c:	00d0      	lsls	r0, r2, #3
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	eb12 0804 	adds.w	r8, r2, r4
 8002916:	eb43 0905 	adc.w	r9, r3, r5
 800291a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	008b      	lsls	r3, r1, #2
 800292e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002932:	0082      	lsls	r2, r0, #2
 8002934:	4640      	mov	r0, r8
 8002936:	4649      	mov	r1, r9
 8002938:	f7fd fc56 	bl	80001e8 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <UART_SetConfig+0x38c>)
 8002942:	fba3 2302 	umull	r2, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	011e      	lsls	r6, r3, #4
 800294a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294c:	4618      	mov	r0, r3
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	1894      	adds	r4, r2, r2
 8002958:	60bc      	str	r4, [r7, #8]
 800295a:	415b      	adcs	r3, r3
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002962:	1812      	adds	r2, r2, r0
 8002964:	eb41 0303 	adc.w	r3, r1, r3
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	f04f 0500 	mov.w	r5, #0
 8002970:	00dd      	lsls	r5, r3, #3
 8002972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002976:	00d4      	lsls	r4, r2, #3
 8002978:	4622      	mov	r2, r4
 800297a:	462b      	mov	r3, r5
 800297c:	1814      	adds	r4, r2, r0
 800297e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002980:	414b      	adcs	r3, r1
 8002982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	f04f 0100 	mov.w	r1, #0
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	008b      	lsls	r3, r1, #2
 8002998:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800299c:	0082      	lsls	r2, r0, #2
 800299e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80029a2:	f7fd fc21 	bl	80001e8 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <UART_SetConfig+0x38c>)
 80029ac:	fba3 1302 	umull	r1, r3, r3, r2
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	2164      	movs	r1, #100	; 0x64
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	3332      	adds	r3, #50	; 0x32
 80029be:	4a2a      	ldr	r2, [pc, #168]	; (8002a68 <UART_SetConfig+0x38c>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ca:	441e      	add	r6, r3
 80029cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ce:	4618      	mov	r0, r3
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	1894      	adds	r4, r2, r2
 80029da:	603c      	str	r4, [r7, #0]
 80029dc:	415b      	adcs	r3, r3
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029e4:	1812      	adds	r2, r2, r0
 80029e6:	eb41 0303 	adc.w	r3, r1, r3
 80029ea:	f04f 0400 	mov.w	r4, #0
 80029ee:	f04f 0500 	mov.w	r5, #0
 80029f2:	00dd      	lsls	r5, r3, #3
 80029f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029f8:	00d4      	lsls	r4, r2, #3
 80029fa:	4622      	mov	r2, r4
 80029fc:	462b      	mov	r3, r5
 80029fe:	eb12 0a00 	adds.w	sl, r2, r0
 8002a02:	eb43 0b01 	adc.w	fp, r3, r1
 8002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	008b      	lsls	r3, r1, #2
 8002a1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a1e:	0082      	lsls	r2, r0, #2
 8002a20:	4650      	mov	r0, sl
 8002a22:	4659      	mov	r1, fp
 8002a24:	f7fd fbe0 	bl	80001e8 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <UART_SetConfig+0x38c>)
 8002a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2164      	movs	r1, #100	; 0x64
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	3332      	adds	r3, #50	; 0x32
 8002a40:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <UART_SetConfig+0x38c>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4432      	add	r2, r6
 8002a52:	609a      	str	r2, [r3, #8]
}
 8002a54:	bf00      	nop
 8002a56:	377c      	adds	r7, #124	; 0x7c
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5e:	bf00      	nop
 8002a60:	40011000 	.word	0x40011000
 8002a64:	40011400 	.word	0x40011400
 8002a68:	51eb851f 	.word	0x51eb851f

08002a6c <atoi>:
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f000 b8b6 	b.w	8002be0 <strtol>

08002a74 <__errno>:
 8002a74:	4b01      	ldr	r3, [pc, #4]	; (8002a7c <__errno+0x8>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	2000000c 	.word	0x2000000c

08002a80 <__libc_init_array>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	4d0d      	ldr	r5, [pc, #52]	; (8002ab8 <__libc_init_array+0x38>)
 8002a84:	4c0d      	ldr	r4, [pc, #52]	; (8002abc <__libc_init_array+0x3c>)
 8002a86:	1b64      	subs	r4, r4, r5
 8002a88:	10a4      	asrs	r4, r4, #2
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	42a6      	cmp	r6, r4
 8002a8e:	d109      	bne.n	8002aa4 <__libc_init_array+0x24>
 8002a90:	4d0b      	ldr	r5, [pc, #44]	; (8002ac0 <__libc_init_array+0x40>)
 8002a92:	4c0c      	ldr	r4, [pc, #48]	; (8002ac4 <__libc_init_array+0x44>)
 8002a94:	f000 f8ae 	bl	8002bf4 <_init>
 8002a98:	1b64      	subs	r4, r4, r5
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	42a6      	cmp	r6, r4
 8002aa0:	d105      	bne.n	8002aae <__libc_init_array+0x2e>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa8:	4798      	blx	r3
 8002aaa:	3601      	adds	r6, #1
 8002aac:	e7ee      	b.n	8002a8c <__libc_init_array+0xc>
 8002aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab2:	4798      	blx	r3
 8002ab4:	3601      	adds	r6, #1
 8002ab6:	e7f2      	b.n	8002a9e <__libc_init_array+0x1e>
 8002ab8:	08002d3c 	.word	0x08002d3c
 8002abc:	08002d3c 	.word	0x08002d3c
 8002ac0:	08002d3c 	.word	0x08002d3c
 8002ac4:	08002d40 	.word	0x08002d40

08002ac8 <memset>:
 8002ac8:	4402      	add	r2, r0
 8002aca:	4603      	mov	r3, r0
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <memset+0xa>
 8002ad0:	4770      	bx	lr
 8002ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad6:	e7f9      	b.n	8002acc <memset+0x4>

08002ad8 <_strtol_l.isra.0>:
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ade:	d001      	beq.n	8002ae4 <_strtol_l.isra.0+0xc>
 8002ae0:	2b24      	cmp	r3, #36	; 0x24
 8002ae2:	d906      	bls.n	8002af2 <_strtol_l.isra.0+0x1a>
 8002ae4:	f7ff ffc6 	bl	8002a74 <__errno>
 8002ae8:	2316      	movs	r3, #22
 8002aea:	6003      	str	r3, [r0, #0]
 8002aec:	2000      	movs	r0, #0
 8002aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af2:	4f3a      	ldr	r7, [pc, #232]	; (8002bdc <_strtol_l.isra.0+0x104>)
 8002af4:	468e      	mov	lr, r1
 8002af6:	4676      	mov	r6, lr
 8002af8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002afc:	5de5      	ldrb	r5, [r4, r7]
 8002afe:	f015 0508 	ands.w	r5, r5, #8
 8002b02:	d1f8      	bne.n	8002af6 <_strtol_l.isra.0+0x1e>
 8002b04:	2c2d      	cmp	r4, #45	; 0x2d
 8002b06:	d134      	bne.n	8002b72 <_strtol_l.isra.0+0x9a>
 8002b08:	f89e 4000 	ldrb.w	r4, [lr]
 8002b0c:	f04f 0801 	mov.w	r8, #1
 8002b10:	f106 0e02 	add.w	lr, r6, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d05c      	beq.n	8002bd2 <_strtol_l.isra.0+0xfa>
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d10c      	bne.n	8002b36 <_strtol_l.isra.0+0x5e>
 8002b1c:	2c30      	cmp	r4, #48	; 0x30
 8002b1e:	d10a      	bne.n	8002b36 <_strtol_l.isra.0+0x5e>
 8002b20:	f89e 4000 	ldrb.w	r4, [lr]
 8002b24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002b28:	2c58      	cmp	r4, #88	; 0x58
 8002b2a:	d14d      	bne.n	8002bc8 <_strtol_l.isra.0+0xf0>
 8002b2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002b30:	2310      	movs	r3, #16
 8002b32:	f10e 0e02 	add.w	lr, lr, #2
 8002b36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002b3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002b3e:	2600      	movs	r6, #0
 8002b40:	fbbc f9f3 	udiv	r9, ip, r3
 8002b44:	4635      	mov	r5, r6
 8002b46:	fb03 ca19 	mls	sl, r3, r9, ip
 8002b4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002b4e:	2f09      	cmp	r7, #9
 8002b50:	d818      	bhi.n	8002b84 <_strtol_l.isra.0+0xac>
 8002b52:	463c      	mov	r4, r7
 8002b54:	42a3      	cmp	r3, r4
 8002b56:	dd24      	ble.n	8002ba2 <_strtol_l.isra.0+0xca>
 8002b58:	2e00      	cmp	r6, #0
 8002b5a:	db1f      	blt.n	8002b9c <_strtol_l.isra.0+0xc4>
 8002b5c:	45a9      	cmp	r9, r5
 8002b5e:	d31d      	bcc.n	8002b9c <_strtol_l.isra.0+0xc4>
 8002b60:	d101      	bne.n	8002b66 <_strtol_l.isra.0+0x8e>
 8002b62:	45a2      	cmp	sl, r4
 8002b64:	db1a      	blt.n	8002b9c <_strtol_l.isra.0+0xc4>
 8002b66:	fb05 4503 	mla	r5, r5, r3, r4
 8002b6a:	2601      	movs	r6, #1
 8002b6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002b70:	e7eb      	b.n	8002b4a <_strtol_l.isra.0+0x72>
 8002b72:	2c2b      	cmp	r4, #43	; 0x2b
 8002b74:	bf08      	it	eq
 8002b76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002b7a:	46a8      	mov	r8, r5
 8002b7c:	bf08      	it	eq
 8002b7e:	f106 0e02 	addeq.w	lr, r6, #2
 8002b82:	e7c7      	b.n	8002b14 <_strtol_l.isra.0+0x3c>
 8002b84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002b88:	2f19      	cmp	r7, #25
 8002b8a:	d801      	bhi.n	8002b90 <_strtol_l.isra.0+0xb8>
 8002b8c:	3c37      	subs	r4, #55	; 0x37
 8002b8e:	e7e1      	b.n	8002b54 <_strtol_l.isra.0+0x7c>
 8002b90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002b94:	2f19      	cmp	r7, #25
 8002b96:	d804      	bhi.n	8002ba2 <_strtol_l.isra.0+0xca>
 8002b98:	3c57      	subs	r4, #87	; 0x57
 8002b9a:	e7db      	b.n	8002b54 <_strtol_l.isra.0+0x7c>
 8002b9c:	f04f 36ff 	mov.w	r6, #4294967295
 8002ba0:	e7e4      	b.n	8002b6c <_strtol_l.isra.0+0x94>
 8002ba2:	2e00      	cmp	r6, #0
 8002ba4:	da05      	bge.n	8002bb2 <_strtol_l.isra.0+0xda>
 8002ba6:	2322      	movs	r3, #34	; 0x22
 8002ba8:	6003      	str	r3, [r0, #0]
 8002baa:	4665      	mov	r5, ip
 8002bac:	b942      	cbnz	r2, 8002bc0 <_strtol_l.isra.0+0xe8>
 8002bae:	4628      	mov	r0, r5
 8002bb0:	e79d      	b.n	8002aee <_strtol_l.isra.0+0x16>
 8002bb2:	f1b8 0f00 	cmp.w	r8, #0
 8002bb6:	d000      	beq.n	8002bba <_strtol_l.isra.0+0xe2>
 8002bb8:	426d      	negs	r5, r5
 8002bba:	2a00      	cmp	r2, #0
 8002bbc:	d0f7      	beq.n	8002bae <_strtol_l.isra.0+0xd6>
 8002bbe:	b10e      	cbz	r6, 8002bc4 <_strtol_l.isra.0+0xec>
 8002bc0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002bc4:	6011      	str	r1, [r2, #0]
 8002bc6:	e7f2      	b.n	8002bae <_strtol_l.isra.0+0xd6>
 8002bc8:	2430      	movs	r4, #48	; 0x30
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1b3      	bne.n	8002b36 <_strtol_l.isra.0+0x5e>
 8002bce:	2308      	movs	r3, #8
 8002bd0:	e7b1      	b.n	8002b36 <_strtol_l.isra.0+0x5e>
 8002bd2:	2c30      	cmp	r4, #48	; 0x30
 8002bd4:	d0a4      	beq.n	8002b20 <_strtol_l.isra.0+0x48>
 8002bd6:	230a      	movs	r3, #10
 8002bd8:	e7ad      	b.n	8002b36 <_strtol_l.isra.0+0x5e>
 8002bda:	bf00      	nop
 8002bdc:	08002c31 	.word	0x08002c31

08002be0 <strtol>:
 8002be0:	4613      	mov	r3, r2
 8002be2:	460a      	mov	r2, r1
 8002be4:	4601      	mov	r1, r0
 8002be6:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <strtol+0x10>)
 8002be8:	6800      	ldr	r0, [r0, #0]
 8002bea:	f7ff bf75 	b.w	8002ad8 <_strtol_l.isra.0>
 8002bee:	bf00      	nop
 8002bf0:	2000000c 	.word	0x2000000c

08002bf4 <_init>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	bf00      	nop
 8002bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	469e      	mov	lr, r3
 8002bfe:	4770      	bx	lr

08002c00 <_fini>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	bf00      	nop
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr
